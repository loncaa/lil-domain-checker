{"version":3,"sources":["components/SubmitPageForm.js","App.js","reportWebVitals.js","index.js"],"names":["createRow","title","value","info","class","className","FETCH_PAGE_Metadata","gql","PageMetadata","props","http","https","data","description","httpsLinksCount","httpLinksCount","internalLinksCount","externalLinksCount","SubmitPageForm","useLazyQuery","onCompleted","setPageDomain","fetchPageMetadata","loading","error","useState","pageDomain","onSubmit","e","preventDefault","domain","startsWith","variables","onChange","target","type","placeholder","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"mUAIA,SAASA,EAAUC,EAAOC,EAAOC,GAC/B,OACE,sBAAKC,MAAM,mCAAX,UACE,sBAAKC,UAAU,SAAf,UACE,oBAAID,MAAM,8CAAV,SAAyDH,IACzD,mBAAGG,MAAM,6BAAT,SAAuCD,OAEzC,qBAAKC,MAAM,wEAAX,SAAoFF,OAgB1F,IAAMI,EAAsBC,YAAH,6PAanBC,EAAe,SAACC,GACpB,IAzBqCN,EAAMO,EAAMC,EAyBjD,EAOIF,EAAMG,KANRX,EADF,EACEA,MACAY,EAFF,EAEEA,YACAC,EAHF,EAGEA,gBACAC,EAJF,EAIEA,eACAC,EALF,EAKEA,mBACAC,EANF,EAMEA,mBAGF,OACE,sBAAKb,MAAM,gDAAX,UACE,sBAAKA,MAAM,8BAAX,UACE,oBAAIA,MAAM,8CAAV,SAAyDH,IACzD,mBAAGG,MAAM,6BAAT,SAAuCS,OAEzC,qBAAKT,MAAM,2BAAX,SACE,+BACGJ,EACC,iBACAgB,EACA,gFAEDhB,EACC,iBACAiB,EACA,sFAlD2Bd,EAoDE,8EApDIO,EAoD2EK,EApDrEJ,EAoDqFG,EAlDpI,sBAAKV,MAAM,mCAAX,UACE,qBAAKC,UAAU,SAAf,SACE,oBAAID,MAAM,6BAAV,SAAwCD,MAE1C,sBAAKC,MAAM,wEAAX,UAAoFM,EAApF,OAA8FC,kBAkGrFO,EA7CQ,WACrB,MAAsDC,YACpDb,EACA,CAAEc,YAAa,kBAAMC,EAAc,OAFrC,mBAAOC,EAAP,YAA4BC,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,MAAOZ,EAA5C,EAA4CA,KAI5C,EAAoCa,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBL,EAAnB,KAEA,OAAIE,EAAgB,4CAChBC,EAAa,UAAN,OAAiBA,GAG1B,sBAAKnB,UAAU,iBAAf,UACE,uBACEA,UAAU,oGACVsB,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAIC,EAASJ,EACRI,EAAOC,WAAW,UACrBD,EAAM,kBAAcJ,IAEtBJ,EAAkB,CAAEU,UAAW,CAAEF,aARrC,UAWE,qBAAK1B,MAAM,mBAAX,SACE,uBACEF,MAAOwB,EACPO,SAAU,SAACL,GAAD,OAAOP,EAAcO,EAAEM,OAAOhC,QACxCiC,KAAK,OACL/B,MAAM,sOACNgC,YAAY,qBAGhB,uBACEhC,MAAM,2NACN+B,KAAK,SACLjC,MAAM,eAGL,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAMU,oBACL,cAAC,EAAD,CAAcV,KAAMA,EAAKU,wBC7G3Be,G,kKACJ,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,YAAf,SACE,oBAAID,MAAM,uEAAV,2CAIF,cAAC,EAAD,a,GAVQkC,cAiBHD,ICVAE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCCRQ,EAAW,IAAIC,IAAS,CAAEC,IAAK,aAE/BC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAG1BtB,M","file":"static/js/main.ae3efaa1.chunk.js","sourcesContent":["import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport \"./SubmitPageForm.css\";\n\nfunction createRow(title, value, info) {\n  return (\n    <div class=\"px-4 py-5 sm:px-6 text-left flex\">\n      <div className=\"flex-1\">\n        <h4 class=\"text-lg leading-6 font-medium text-gray-900\">{title}</h4>\n        <p class=\"mt-1 text-sm text-gray-500\">{info}</p>\n      </div>\n      <div class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2 m-auto text-gray-900\">{value}</div>\n    </div>\n  );\n}\n\nfunction createHttpOverHttpsRowElement(info, http, https) {\n  return (\n    <div class=\"px-4 py-5 sm:px-6 text-left flex\">\n      <div className=\"flex-1\">\n        <h6 class=\"mt-1 text-sm text-gray-500\">{info}</h6>\n      </div>\n      <div class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2 m-auto text-gray-900\">{http} vs {https}</div>\n    </div>\n  );\n}\n\nconst FETCH_PAGE_Metadata = gql`\n  query PageMetadata($domain: String!) {\n    fetchPageMetadata(domain: $domain) {\n      title\n      description\n      httpsLinksCount\n      httpLinksCount\n      internalLinksCount\n      externalLinksCount\n    }\n  }\n`;\n\nconst PageMetadata = (props) => {\n  const {\n    title,\n    description,\n    httpsLinksCount,\n    httpLinksCount,\n    internalLinksCount,\n    externalLinksCount,\n  } = props.data;\n\n  return (\n    <div class=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n      <div class=\"px-4 py-5 sm:px-6 text-left\">\n        <h3 class=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3>\n        <p class=\"mt-1 text-sm text-gray-500\">{description}</p>\n      </div>\n      <div class=\"border-t border-gray-200\">\n        <dl>\n          {createRow(\n            \"Internal Links\",\n            internalLinksCount,\n            \"The number of links and scripts pointing to internal resources (same domain)\"\n          )}\n          {createRow(\n            \"External Links\",\n            externalLinksCount,\n            \"The number of links and scripts pointing to external resources (different domain)\"\n          )}\n          {createHttpOverHttpsRowElement(\"The total number of links and scripts served through HTTP vs HTTPS protocol\", httpLinksCount, httpsLinksCount)}\n        </dl>\n      </div>\n    </div>\n  );\n};\n\nconst SubmitPageForm = () => {\n  const [fetchPageMetadata, { loading, error, data }] = useLazyQuery(\n    FETCH_PAGE_Metadata,\n    { onCompleted: () => setPageDomain(\"\") }\n  );\n  const [pageDomain, setPageDomain] = useState(\"\");\n\n  if (loading) return <p>Loading ...</p>;\n  if (error) return `Error! ${error}`;\n\n  return (\n    <div className=\"MetadataSearch\">\n      <form\n        className=\"flex flex-col md:flex-row w-3/4 md:w-full md:space-x-3 space-y-3 md:space-y-0 justify-center my-8\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          let domain = pageDomain;\n          if (!domain.startsWith(\"http\")) {\n            domain = `https://${pageDomain}`;\n          }\n          fetchPageMetadata({ variables: { domain } });\n        }}\n      >\n        <div class=\" relative w-full\">\n          <input\n            value={pageDomain}\n            onChange={(e) => setPageDomain(e.target.value)}\n            type=\"text\"\n            class=\" rounded-lg border-transparent flex-1 appearance-none border border-gray-300 w-full py-2 px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm  focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent\"\n            placeholder=\"www.google.com\"\n          />\n        </div>\n        <input\n          class=\"flex-shrink-0 px-4 py-2 text-base font-semibold text-white bg-purple-600 rounded-lg shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-purple-200\"\n          type=\"submit\"\n          value=\"Submit\"\n        />\n      </form>\n      {data?.fetchPageMetadata && (\n        <PageMetadata data={data.fetchPageMetadata} />\n      )}\n    </div>\n  );\n};\n\nexport default SubmitPageForm;\n","import React, { Component } from \"react\";\nimport SubmitPageForm from \"./components/SubmitPageForm\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-title\">\n            <h2 class=\"text-3xl font-extrabold text-purple-600  dark:text-white sm:text-4xl\">\n              Software engineer Challenge\n            </h2>\n          </div>\n          <SubmitPageForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from \"@apollo/client\";\n\nconst httpLink = new HttpLink({ uri: '/graphql' })\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}